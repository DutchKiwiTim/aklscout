// Foursquare API Credentials - Tim
const client_id = '&client_id=' + 'Q5PQQNTJS4UGM10I1RWODUVC4XS2PBULBDYZKFLAFECJ4ZIM';
const client_secret = '&client_secret=' + '4TMTXMB4LL35O3GR1QXONNBAJ5OCGZUO5HLWAQQGSHHPZZV2';

// // Foursquare API Credentials - Nikita
// const client_id = '&client_id=' + '2F1JEBGBXWUCCK1VS5OZAFT2BELR15OCVOBRDEVCJFKQNDGM';
// const client_secret = '&client_secret=' + 'UIK2BOJFZ1OEZJRBIMW35SOGRB1LFETJVWICBAVBE4JJVCJP';

// // Foursquare API Credentials - Louella
// const client_id = '&client_id=' + 'JSBCLUKSAG3BD0D1BOIRNAEMKWTQY0P401LJCYETQQXBS3W0';
// const client_secret = '&client_secret=' + 'HSRPRSP1SQJWTG3NN2EOBPCASHO52SBOU4ZPFXOJPZYIL3DK';
// Step 2 - Link the html element to the foursquare category ID
function identifyCategory(e) {
  // declare variables
  let chosenRadius = '0';
  let chosenCategory = '0';
  // simple conditional to match the DOM element to the api ID
  if (e.id == 'jsCatParks') {
    chosenRadius = '2000';
    chosenCategory = '4bf58dd8d48988d163941735';
    createSearchRequestURI(chosenRadius, chosenCategory);

  } else if (e.id == 'jsCatBeaches') {
    chosenRadius = '2000';
    chosenCategory = '4bf58dd8d48988d1e2941735';
    createSearchRequestURI(chosenRadius, chosenCategory);

  } else if (e.id == 'jsCatLookouts') {
    chosenRadius = '2000';
    chosenCategory = '4bf58dd8d48988d165941735';
    createSearchRequestURI(chosenRadius, chosenCategory);
  }
}


// Step 3 - Create the search query request uri
function createSearchRequestURI(rad, cat) {
  const baseURI = 'https://api.foursquare.com/v2/venues/search?v=20170901';
  // const client_id = '&client_id=' + 'Q5PQQNTJS4UGM10I1RWODUVC4XS2PBULBDYZKFLAFECJ4ZIM';
  // const client_secret = '&client_secret=' + '4TMTXMB4LL35O3GR1QXONNBAJ5OCGZUO5HLWAQQGSHHPZZV2';
  const latlong = '&ll=' + '-36.8786499,174.7602798';
  // This value will be a variable
  const radius = '&radius=' + rad;
  // This value will be a variable
  const categoryId = '&categoryId=' + cat;
  // Put all the pieces together
  const requestURI = baseURI + client_id + client_secret + latlong + radius + categoryId;
  
  makeSearchRequest(requestURI);
}


// Step 4 - Make the actual request
function makeSearchRequest(uri) {
  fetch(uri)
    .then(function(response) {
      return response.json();
    })
    .then(function(myJson) {
      extractNeededData(myJson.response.venues);
      //console.log(myJson.response.venues);
    })
    .catch(function(error) {
      // Code for handling errors
      console.log(error);
    });
}


// Step 5 - Extract the data we are using from the json response
function extractNeededData(data) {

  // declare empty array
  const venuesForMap = [];

  // Loop through json response
  data.forEach(venue => {

    // Push the name, ID, and latlng into an array to use for the map
    venuesForMap.push({
      name: venue.name,
      id: venue.id,
      latlng: 
        [
          venue.location.lat,
          venue.location.lng
        ]
      
    });
  });

  createMap(venuesForMap);
}




  
// Tim's work START
// Categories:
// Parks: 4bf58dd8d48988d163941735
// Beaches: 4bf58dd8d48988d1e2941735
// Pools: 4bf58dd8d48988d15e941735
// Scenic Lookout: 4bf58dd8d48988d165941735
// Skate Park: 4bf58dd8d48988d167941735


// Identifiers
// Every ID prefixed with 'js' is a DOM element
const jsCatDropdown = document.getElementById('jsCatDropdown');
const jsCatTrending = document.getElementById('jsCatTrending');
const jsCatParks = document.getElementById('jsCatParks');
const jsCatBeaches = document.getElementById('jsCatBeaches');
const jsCatLookouts = document.getElementById('jsCatLookouts');
// this needs to be a global variable in order to access it from different functions
let mymap;
let zoom = 0;
// Tim's work END


// Louella's Work START - Modal pop up
const jsModalLongTitle = document.getElementById('jsModalLongTitle');
const jsVenueDescription = document.getElementById('jsVenueDescription');
const jsVenueWebsite = document.getElementById('jsVenueWebsite');
const jsMiniMap = document.getElementById('jsMiniMap');
// Louella's Work END - Modal pop up


document.addEventListener("DOMContentLoaded", () => {
  console.log("DOM ready!");

  // identify the event target
  jsCatDropdown.addEventListener('click', (e) => {
    identifyCategory(e.target);
  });

  // Load the empty map on page load
  createInitialMap();
});


// Detect screen width and change zoom accordingly - by Nikita
function detectScreenWidth() {

  if ($(window).width() < 768) {
    let zoom = 10;
    console.log('screen size is less than 768px');
    return zoom;
  }
  else {
    let zoom = 11;
    console.log('screen size is less than 768px');
    return zoom;
  };
}


function createInitialMap() {

  // detect screen size
  let z = detectScreenWidth();

  // Map work by Nikita START
  let center = [-36.8977931, 174.7854973];
  mymap = L.map('mapid').setView(center, z);

  L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token=pk.eyJ1IjoidGhhbHl4OTAiLCJhIjoiY2o2YjdrZHRlMWJmYjJybDd2cW1rYnVnNSJ9.j_DQLfixHfhioVjH6qmqkw', {
    attribution: 'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors, <a href="https://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery © <a href="https://www.mapbox.com/">Mapbox</a>',
    maxZoom: 18,
    id: 'mapbox.streets',
    accessToken: 'pk.eyJ1IjoibmlraXRhaG9pbmVzIiwiYSI6ImNqc203cHN5NDEwaGg0OXBpYnE0aXhhZmYifQ.58l8dUZg4uiFn7BYnZCJFA'
  }).addTo(mymap);

  // radius
  L.circle(center, {
    radius: 21500,
    color: 'salmon',
    weight: 1,
    fill: true
  }).addTo(mymap);
}


function createMap(v) {

  // detect screen size
  let z = detectScreenWidth();

  // remove previously loaded map first
  if(mymap) {
    mymap.remove();
  }

  // Map work by Nikita START
  let center = [-36.8977931, 174.7854973];
   mymap = L.map('mapid').setView(center, z);

  L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token=pk.eyJ1IjoidGhhbHl4OTAiLCJhIjoiY2o2YjdrZHRlMWJmYjJybDd2cW1rYnVnNSJ9.j_DQLfixHfhioVjH6qmqkw', {
    attribution: 'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors, <a href="https://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery © <a href="https://www.mapbox.com/">Mapbox</a>',
    maxZoom: 18,
    id: 'mapbox.streets',
    accessToken: 'pk.eyJ1IjoibmlraXRhaG9pbmVzIiwiYSI6ImNqc203cHN5NDEwaGg0OXBpYnE0aXhhZmYifQ.58l8dUZg4uiFn7BYnZCJFA'
  }).addTo(mymap);

  // radius
  L.circle(center, {
    radius: 21500,
    color: 'salmon',
    weight: 1,
    fill: true
  }).addTo(mymap);

  // nikita - putting markers on the map
  v.forEach(function (venue) {
    try {
      var serviceIcon = L.icon({
        iconUrl: '../build/img/pin.svg',
        iconSize: [72, 72],
        popupAnchor: [0, -36]
      });
      var marker = L.marker(venue.latlng, { icon: serviceIcon }).addTo(mymap);
      marker.bindPopup('<div>' + venue.name + '</div>')

    } catch (error) {
      console.log(error);
    }
  });

   //Louella
   modal();

}


//Work from Louella

// foursquare Oauth
// const version = '?v=20170901';
// const clientid = '&client_id=JSBCLUKSAG3BD0D1BOIRNAEMKWTQY0P401LJCYETQQXBS3W0';
// const clientSecret = '&client_secret=HSRPRSP1SQJWTG3NN2EOBPCASHO52SBOU4ZPFXOJPZYIL3DK';
// const key = version + clientid + clientSecret;

// const venueId = '59a45921351e3d43b07028b5';
// const venueUrl = 'https://api.foursquare.com/v2/venues/' + venueId;


// Load modal
function modal() {
    $('#modalCenter').on('shown.bs.modal', function () {
        // Insert Mini map
        // https://leafletjs.com/reference-1.0.0.html
        let userLocation = [-36.8977931, 174.7854973];
        let miniMap = L.map('jsMiniMap', {
            scrollWheelZoom: false
        }).setView(userLocation, 17);

        L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token={accessToken}', {
            attribution: 'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors, <a href="https://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery © <a href="https://www.mapbox.com/">Mapbox</a>',
            maxZoom: 18,
            id: 'mapbox.streets',
            accessToken: 'pk.eyJ1IjoibmlraXRhaG9pbmVzIiwiYSI6ImNqc203cHN5NDEwaGg0OXBpYnE0aXhhZmYifQ.58l8dUZg4uiFn7BYnZCJFA'
        }).addTo(miniMap);
    });
}

// Load Carousel
$('.carousel').carousel();


// Ajax request to a specific venue
// let venueUrl = 'https://api.foursquare.com/v2/venues/explore' + key + '&ll=-36.8446152873055 , 174.76662397384644' + '&radius=60';
// $.ajax({

// 	url: venueUrl,
// 	dataType: 'jsonp',

// 	// let's show a little preloader to the user while they wait for a nice User Experience
// 	beforeSend: function(res) {
// 		$('<div class="pre-loader"> ... loading portfolio ... </div>').prependTo('body');
// 	},

// 	// when the ajax request is complete do all of these things
// 	success: function(res) {

// 		console.log(res);

// 		// Success! We can get rid of the preloader now...
// 		$('.pre-loader').detach();


// 	},

// 	// if the ajax request fails do these things as a fallback
// 	error: function(res) {
// 		$('<h1> Error!! </h1>').appendTo('body');
// 	}

// }); // END ajax request

//# sourceMappingURL=data:application/json;charset=utf8;base64,
